import numpy as np

parents = [
    -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
    20, 20, 9, 23, 24, 25, 26, 26, 26, 5, 30, 31, 32, 33, 4, 35, 8, 37, 38, 
    39, 40, 41, 42, 40, 44, 45, 40, 47, 48, 40, 46, 43, 37, 36, 54, 55, 56, 
    57, 20, 9, 60, 61, 62, 63, 63, 63, 5, 67, 68, 69, 70, 8, 72, 73, 74, 75, 
    76, 77, 75, 79, 80, 75, 82, 83, 75, 81, 78, 72
]

matrices = [
    np.asmatrix(np.array([  1.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  1.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  1.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  1.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  1.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  1.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00,  1.000000000000000e+00,  0.000000000000000e+00, -9.278863788431124e-10,  0.000000000000000e+00, -1.174585873009448e-09,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.370907057207660e-06,  0.000000000000000e+00,  1.000000119209290e+00,  0.000000000000000e+00,  0.000000000000000e+00,  1.000000000000000e+00,  0.000000000000000e+00,  0.000000000000000e+00, -1.000000119209290e+00,  0.000000000000000e+00,  1.370907057207660e-06,  0.000000000000000e+00,  6.511978507041931e-01, -9.862774610519409e-01, -4.291959783131460e-07,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -1.386800249747466e-06,  1.000000119209290e+00,  2.757707306955126e-06,  0.000000000000000e+00,  1.000000000000000e+00,  1.386800249747466e-06, -4.336809723917783e-19,  0.000000000000000e+00, -3.824388288692360e-12,  2.757707306955126e-06, -1.000000119209290e+00,  0.000000000000000e+00, -9.862774610519409e-01, -2.231137614217005e-06,  3.130745887756348e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.362159878226521e-06,  1.000000119209290e+00, -2.618982534841052e-06,  0.000000000000000e+00,  1.127851456403732e-01, -2.755903324214160e-06, -9.936195015907288e-01,  0.000000000000000e+00, -9.936196208000183e-01,  1.058086240846023e-06, -1.127851456403732e-01,  0.000000000000000e+00,  1.838853657245636e-01,  2.777018835331546e-06,  1.155975818634033e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.350123397969583e-06,  1.000000119209290e+00, -3.011408807651605e-06,  0.000000000000000e+00, -1.734678894281387e-01, -2.731551376200514e-06, -9.848395586013794e-01,  0.000000000000000e+00, -9.848396182060242e-01,  1.852037712524179e-06,  1.734679043292999e-01,  0.000000000000000e+00,  3.506404459476471e-01,  2.627071125971270e-06,  1.101913094520569e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.308555397372402e-06,  1.000000119209290e+00, -3.182341060892213e-06,  0.000000000000000e+00, -2.981535494327545e-01, -2.647451537995948e-06, -9.545179605484009e-01,  0.000000000000000e+00, -9.545180201530457e-01,  2.197866024289397e-06,  2.981535792350769e-01,  0.000000000000000e+00,  3.155076801776886e-01,  2.539983142924029e-06,  1.070514202117920e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.308555397372402e-06,  1.000000119209290e+00, -3.182341060892213e-06,  0.000000000000000e+00, -2.981535494327545e-01, -2.647451537995948e-06, -9.545179605484009e-01,  0.000000000000000e+00, -9.545180201530457e-01,  2.197866024289397e-06,  2.981535792350769e-01,  0.000000000000000e+00,  7.499650120735168e-02,  2.540725290600676e-06,  1.070781946182251e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  7.535704185102077e-07,  1.000000119209290e+00, -1.628385007279576e-06,  0.000000000000000e+00,  8.353701233863831e-01, -1.524613480796688e-06, -5.496875047683716e-01,  0.000000000000000e+00, -5.496875643730164e-01, -9.460763976676390e-07, -8.353701829910278e-01,  0.000000000000000e+00, -1.101271748542786e+00, -3.064231179905619e-07,  4.426481947302818e-02,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  6.247045121199335e-07,  1.000000119209290e+00, -1.553299057377444e-06,  0.000000000000000e+00,  8.901413083076477e-01, -1.263889430447307e-06, -4.556842744350433e-01,  0.000000000000000e+00, -4.556842446327209e-01, -1.097988047149556e-06, -8.901414871215820e-01,  0.000000000000000e+00, -1.257396459579468e+00, -6.868076525279321e-07, -9.288161993026733e-02,  9.999999403953552e-01 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.000000238418579e+00, -7.165349416027311e-07, -7.076778842929343e-07,  0.000000000000000e+00, -8.635747690277640e-07, -2.228530049324036e-01, -9.748521447181702e-01,  0.000000000000000e+00,  6.628832807109575e-07,  9.748518466949463e-01, -2.228530645370483e-01,  0.000000000000000e+00,  1.429018652743252e-06,  9.859201312065125e-01,  1.079832434654236e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.000000119209290e+00, -9.066003485713736e-07, -3.941216561997862e-07,  0.000000000000000e+00, -8.782272971075145e-07, -5.500829815864563e-01, -8.351103067398071e-01,  0.000000000000000e+00,  6.446582005992241e-07,  8.351102471351624e-01, -5.500829219818115e-01,  0.000000000000000e+00,  1.438567437617166e-06,  1.362345337867737e+00,  8.591681122779846e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.000000000000000e+00, -9.085126748686889e-07, -3.902192702298635e-07,  0.000000000000000e+00, -8.748183404350129e-07, -5.511037111282349e-01, -8.344365358352661e-01,  0.000000000000000e+00,  6.375603902597504e-07,  8.344364762306213e-01, -5.511036515235901e-01,  0.000000000000000e+00,  1.429517169526662e-06,  1.352634191513062e+00,  1.104567766189575e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.000000119209290e+00, -7.541322588622279e-07, -6.412985840142937e-07,  0.000000000000000e+00, -8.746131356929254e-07, -2.801748812198639e-01, -9.599487781524658e-01,  0.000000000000000e+00,  6.356249286909588e-07,  9.599485993385315e-01, -2.801748812198639e-01,  0.000000000000000e+00,  1.429916437700740e-06,  9.030862450599670e-01,  1.696295976638794e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.000000000000000e+00, -3.589628931877087e-07, -8.868819918461668e-07,  0.000000000000000e+00, -8.353808880201541e-07,  1.387381106615067e-01, -9.903289675712585e-01,  0.000000000000000e+00,  6.489857469205162e-07,  9.903287291526794e-01,  1.387382447719574e-01, -0.000000000000000e+00,  1.355078666165355e-06,  5.981686711311340e-02,  2.076842784881592e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.000000119209290e+00,  3.466831799414649e-07, -9.612823532734183e-07,  0.000000000000000e+00, -7.912908017715381e-07,  7.616893053054810e-01, -6.479420661926270e-01,  0.000000000000000e+00,  6.267226240197488e-07,  6.479423046112061e-01,  7.616890668869019e-01, -0.000000000000000e+00,  1.250200739377760e-06, -1.439121365547180e+00,  1.725447177886963e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.000000119209290e+00,  9.252072459275951e-07, -5.871032158211165e-07,  0.000000000000000e+00, -8.132571451824333e-07,  1.000000119209290e+00,  7.634381472598761e-05,  0.000000000000000e+00,  5.428877898339124e-07, -7.637192902620882e-05,  9.999999403953552e-01,  0.000000000000000e+00,  1.259767827832547e-06, -2.308601856231689e+00,  5.009757280349731e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.000000119209290e+00,  9.252070185539196e-07, -5.871031589776976e-07,  0.000000000000000e+00, -8.132570883390144e-07,  9.999998807907104e-01,  7.634380017407238e-05,  0.000000000000000e+00,  5.428877898339124e-07, -7.637190719833598e-05,  9.999997615814209e-01,  0.000000000000000e+00,  1.101605157600716e-04, -2.296537876129150e+00,  6.599931120872498e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.051330173140741e-06, -1.000000000000000e+00,  2.745165090800583e-07,  0.000000000000000e+00,  8.191074728965759e-01,  9.067205724022642e-07,  5.736398696899414e-01,  0.000000000000000e+00, -5.736401081085205e-01, -3.339403065183433e-07,  8.191069364547729e-01,  0.000000000000000e+00, -2.302662134170532e+00, -1.316079419666494e-06, -6.823382377624512e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.051330173140741e-06, -1.000000000000000e+00,  2.745165659234772e-07,  0.000000000000000e+00,  8.191075325012207e-01,  9.067206292456831e-07,  5.736400485038757e-01,  0.000000000000000e+00, -5.736401677131653e-01, -3.339403065183433e-07,  8.191072344779968e-01,  0.000000000000000e+00, -2.302553415298462e+00,  1.206191442906857e-02, -5.233208537101746e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.067461766979250e-06, -1.000000000000000e+00,  5.566539584833663e-07,  0.000000000000000e+00,  6.952226161956787e-01,  1.030337898555445e-06,  7.187944054603577e-01,  0.000000000000000e+00, -7.187945842742920e-01, -3.360010225605947e-07,  6.952222585678101e-01,  0.000000000000000e+00, -2.030648708343506e+00, -1.383354970130313e-06, -9.495294690132141e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.192091872326273e-06, -9.063073992729187e-01,  4.226183295249939e-01,  0.000000000000000e+00,  8.483814001083374e-01,  2.237288355827332e-01,  4.797857999801636e-01,  0.000000000000000e+00, -5.293858647346497e-01,  3.585408031940460e-01,  7.688941359519958e-01,  0.000000000000000e+00, -2.452614545822144e+00, -2.507790029048920e-01, -3.865205943584442e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -7.801955342292786e-01,  5.544175580143929e-02, -6.230742335319519e-01,  0.000000000000000e+00, -5.723065733909607e-01,  3.388131558895111e-01,  7.467737793922424e-01,  0.000000000000000e+00,  2.525081932544708e-01,  9.392188191413879e-01, -2.326108366250992e-01,  0.000000000000000e+00,  6.503490805625916e-01,  2.163990139961243e-01, -8.641870617866516e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -3.640568628907204e-02,  9.993364810943604e-01,  1.291047199629247e-03,  0.000000000000000e+00, -9.734669923782349e-01, -3.575525432825089e-02,  2.260171473026276e-01,  0.000000000000000e+00,  2.259133607149124e-01,  6.971517112106085e-03,  9.741225242614746e-01, -0.000000000000000e+00,  8.681622743606567e-01,  2.904264330863953e-01,  3.084107041358948e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -3.258726373314857e-02,  9.993364810943604e-01, -1.628223061561584e-02,  0.000000000000000e+00, -9.629732370376587e-01, -3.575525432825089e-02, -2.672158181667328e-01,  0.000000000000000e+00, -2.676206827163696e-01,  6.971516180783510e-03,  9.634993076324463e-01,  0.000000000000000e+00,  2.864980995655060e-01,  2.904264628887177e-01,  5.072795152664185e-01,  1.000000119209290e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -1.188279129564762e-02,  9.992880821228027e-01, -3.581236675381660e-02,  0.000000000000000e+00, -5.213099122047424e-01, -3.675352036952972e-02, -8.525754809379578e-01,  0.000000000000000e+00, -8.532845973968506e-01,  8.538367226719856e-03,  5.213755369186401e-01,  0.000000000000000e+00, -3.528853356838226e-01,  2.913224101066589e-01,  3.638275563716888e-01,  9.999999403953552e-01 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -4.378840923309326e-01,  8.717925548553467e-01, -2.196261286735535e-01,  0.000000000000000e+00, -8.005400747060776e-02, -2.811313271522522e-01, -9.563245773315430e-01,  0.000000000000000e+00, -8.954603075981140e-01, -4.011773169040680e-01,  1.928934752941132e-01,  0.000000000000000e+00, -7.424581646919250e-01,  6.337492913007736e-02,  7.929810881614685e-02,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  4.010880887508392e-01,  1.869400739669800e-01, -8.967621922492981e-01,  0.000000000000000e+00, -3.296798095107079e-02, -9.753755927085876e-01, -2.180732488632202e-01,  0.000000000000000e+00, -9.154462814331055e-01,  1.170310452580452e-01, -3.850483596324921e-01,  0.000000000000000e+00, -5.163761377334595e-01,  1.612294912338257e-01, -4.393163919448853e-01,  1.000000119209290e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -6.070432811975479e-02,  9.974886775016785e-01, -3.648981824517250e-02,  0.000000000000000e+00, -5.636620149016380e-02, -3.992457687854767e-02, -9.976117014884949e-01,  0.000000000000000e+00, -9.965631961822510e-01, -5.850253254175186e-02,  5.864827334880829e-02,  0.000000000000000e+00, -6.776808500289917e-01,  2.426960766315460e-01,  6.510639935731888e-02,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -1.823517084121704e-01, -9.827299714088440e-01, -3.146792203187943e-02,  0.000000000000000e+00, -9.567187428474426e-01,  1.699610650539398e-01,  2.362252920866013e-01,  0.000000000000000e+00, -2.267972975969315e-01,  7.318204641342163e-02, -9.711886048316956e-01,  0.000000000000000e+00,  9.859551191329956e-01, -3.448838293552399e-01,  6.612823158502579e-02,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  7.013650238513947e-02, -9.827297925949097e-01, -1.712403148412704e-01,  0.000000000000000e+00, -2.386260405182838e-02,  1.699610650539398e-01, -9.851617813110352e-01,  0.000000000000000e+00,  9.972519278526306e-01,  7.318203896284103e-02, -1.153001654893160e-02, -0.000000000000000e+00, -1.655903458595276e-01, -3.448837101459503e-01,  4.420788288116455e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -1.709750443696976e-01, -9.827298521995544e-01, -7.078077644109726e-02,  0.000000000000000e+00, -9.852447509765625e-01,  1.699610501527786e-01,  2.015301771461964e-02,  0.000000000000000e+00, -7.774992845952511e-03,  7.318204641342163e-02, -9.972884058952332e-01,  0.000000000000000e+00,  4.400689303874969e-01, -3.448838293552399e-01,  5.346564650535583e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  4.169620573520660e-02, -9.954151511192322e-01, -8.608140796422958e-02,  0.000000000000000e+00, -8.052924871444702e-01,  1.751615293323994e-02, -5.926191210746765e-01,  0.000000000000000e+00,  5.914099216461182e-01,  9.403066337108612e-02, -8.008700609207153e-01, -0.000000000000000e+00, -1.471569091081619e-01, -3.273444771766663e-01,  5.518357753753662e-01,  9.999999403953552e-01 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -9.430088847875595e-02, -9.954152703285217e-01,  1.599765941500664e-02,  0.000000000000000e+00, -1.529734116047621e-02,  1.751618832349777e-02,  9.997296333312988e-01,  0.000000000000000e+00, -9.954264163970947e-01,  9.403065592050552e-02, -1.687901280820370e-02,  0.000000000000000e+00,  4.148872196674347e-01, -3.273445069789886e-01, -3.278128104284406e-03,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  2.649515238317690e-07,  1.000000238418579e+00, -4.769381689584407e-07,  0.000000000000000e+00,  6.036795973777771e-01,  2.773481071471906e-07,  7.972272634506226e-01,  0.000000000000000e+00,  7.972273826599121e-01, -4.320153550452233e-07, -6.036796569824219e-01,  0.000000000000000e+00, -8.992899060249329e-01, -2.014257347582316e-07, -4.532300233840942e-01,  9.999999403953552e-01 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.139556786711182e-07,  1.000000119209290e+00, -5.643609028993524e-07,  0.000000000000000e+00,  6.036794781684875e-01,  4.381969631594984e-07,  7.972272038459778e-01,  0.000000000000000e+00,  7.972272634506226e-01, -3.644126707058604e-07, -6.036795377731323e-01,  0.000000000000000e+00, -8.942760825157166e-01, -3.110808108885976e-07, -2.638878226280212e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -9.079989194869995e-01,  4.178075790405273e-01,  3.123785182833672e-02,  0.000000000000000e+00, -4.047109484672546e-01, -8.553588986396790e-01, -3.233730792999268e-01,  0.000000000000000e+00, -1.083882749080658e-01, -3.062649369239807e-01,  9.457549452781677e-01,  0.000000000000000e+00,  1.785676479339600e-01,  9.354549646377563e-01,  6.373381614685059e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -9.774735569953918e-01,  2.091525793075562e-01, -2.831005677580833e-02,  0.000000000000000e+00, -2.074890583753586e-01, -9.768211841583252e-01, -5.261908844113350e-02,  0.000000000000000e+00, -3.865931183099747e-02, -4.556002840399742e-02,  9.982131123542786e-01,  0.000000000000000e+00, -1.758330613374710e-01,  1.720518231391907e+00,  1.632561981678009e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -9.774735569953918e-01,  1.982110887765884e-01, -7.251647859811783e-02,  0.000000000000000e+00, -2.074890583753586e-01, -9.653699398040771e-01,  1.581442654132843e-01,  0.000000000000000e+00, -3.865931555628777e-02,  1.696278005838394e-01,  9.847496151924133e-01,  0.000000000000000e+00, -1.763469725847244e-01,  2.377075195312500e+00, -3.549132347106934e-01,  1.000000119209290e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -9.774734973907471e-01,  1.982110589742661e-01, -7.251647859811783e-02,  0.000000000000000e+00, -2.074890434741974e-01, -9.653698205947876e-01,  1.581442505121231e-01,  0.000000000000000e+00, -3.865930438041687e-02,  1.696277856826782e-01,  9.847495555877686e-01,  0.000000000000000e+00, -1.762381345033646e-01,  2.760053396224976e+00, -3.557800650596619e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -5.621185898780823e-01, -3.035990595817566e-01, -7.693186402320862e-01,  0.000000000000000e+00,  2.935461997985840e-01,  7.963887453079224e-01, -5.287677645683289e-01,  0.000000000000000e+00,  7.732102274894714e-01, -5.230599045753479e-01, -3.585446476936340e-01,  0.000000000000000e+00, -1.155340433120728e+00, -2.420726537704468e+00,  8.152319192886353e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -5.528885126113892e-01, -1.584291458129883e-01, -8.180557489395142e-01,  0.000000000000000e+00,  2.339680194854736e-01,  9.127449393272400e-01, -3.348962068557739e-01,  0.000000000000000e+00,  7.997335195541382e-01, -3.765584230422974e-01, -4.675786793231964e-01,  0.000000000000000e+00, -1.026660680770874e+00, -1.961139321327209e+00,  3.981464505195618e-01,  1.000000119209290e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -5.260267853736877e-01, -7.239304482936859e-02, -8.473817706108093e-01,  0.000000000000000e+00,  2.105516195297241e-01,  9.542679786682129e-01, -2.122281044721603e-01,  0.000000000000000e+00,  8.239928483963013e-01, -2.900546789169312e-01, -4.867277741432190e-01,  0.000000000000000e+00, -9.917337894439697e-01, -1.354964137077332e+00,  2.055418342351913e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -8.676075935363770e-01,  2.210390567779541e-01, -4.454207420349121e-01,  0.000000000000000e+00,  4.734095335006714e-01,  6.412195563316345e-01, -6.039209961891174e-01,  0.000000000000000e+00,  1.521225273609161e-01, -7.348319292068481e-01, -6.609690785408020e-01,  0.000000000000000e+00, -1.967077493667603e+00, -1.559482216835022e+00,  1.269786357879639e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -8.676073551177979e-01,  3.550532758235931e-01, -3.481308221817017e-01,  0.000000000000000e+00,  4.734094142913818e-01,  8.039814233779907e-01, -3.598569035530090e-01,  0.000000000000000e+00,  1.521224677562714e-01, -4.770223498344421e-01, -8.656256198883057e-01,  0.000000000000000e+00, -1.965271472930908e+00, -1.256690144538879e+00,  9.074234962463379e-01,  9.999998807907104e-01 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -9.263821840286255e-01,  1.867549568414688e-01, -3.270159661769867e-01,  0.000000000000000e+00,  2.735086977481842e-01,  9.305731058120728e-01, -2.433656305074692e-01,  0.000000000000000e+00,  2.588624656200409e-01, -3.148906230926514e-01, -9.131450057029724e-01,  0.000000000000000e+00, -1.777218461036682e+00, -1.127729296684265e+00,  7.701182961463928e-01,  1.000000119209290e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  3.634244799613953e-01,  6.817949414253235e-01,  6.348848342895508e-01,  0.000000000000000e+00, -8.824603557586670e-01,  4.703869819641113e-01,  5.960465188081798e-08,  0.000000000000000e+00, -2.986417710781097e-01, -5.602601766586304e-01,  7.726068496704102e-01,  0.000000000000000e+00,  2.777426242828369e+00, -8.263252377510071e-01,  5.343859195709229e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  6.702061891555786e-01,  5.709960460662842e-01,  4.741178750991821e-01,  0.000000000000000e+00, -6.267738342285156e-01,  7.775664925575256e-01, -5.045096948742867e-02,  0.000000000000000e+00, -3.974654376506805e-01, -2.633516490459442e-01,  8.790147304534912e-01,  0.000000000000000e+00,  2.804616212844849e+00, -5.639193654060364e-01,  2.978716492652893e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  6.702062487602234e-01,  5.709960460662842e-01,  4.741178452968597e-01,  0.000000000000000e+00, -6.267738938331604e-01,  7.775663733482361e-01, -5.045097693800926e-02,  0.000000000000000e+00, -3.974654674530029e-01, -2.633516192436218e-01,  8.790147304534912e-01,  0.000000000000000e+00,  2.804102659225464e+00,  6.841937303543091e-01,  2.978716194629669e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -7.236776947975159e-01, -6.516944766044617e-01,  2.271251231431961e-01,  0.000000000000000e+00, -1.418587416410446e-01,  4.625401794910431e-01,  8.751759529113770e-01,  0.000000000000000e+00, -6.754014492034912e-01,  6.011256575584412e-01, -4.271779656410217e-01,  0.000000000000000e+00, -1.973658204078674e-01, -1.691291213035583e+00, -2.329316616058350e+00,  9.999999403953552e-01 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -9.135669469833374e-01,  4.065579771995544e-01,  1.032248232513666e-02,  0.000000000000000e+00,  3.907745778560638e-01,  8.845648765563965e-01, -2.546376883983612e-01,  0.000000000000000e+00, -1.126555800437927e-01, -2.285945564508438e-01, -9.669814109802246e-01,  0.000000000000000e+00, -2.060674190521240e+00, -3.874875605106354e-01,  1.388747811317444e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -8.789523243904114e-01, -1.534342952072620e-02, -4.766633212566376e-01,  0.000000000000000e+00,  1.484875082969666e-01,  9.409981369972229e-01, -3.040960729122162e-01,  0.000000000000000e+00,  4.532049000263214e-01, -3.380640745162964e-01, -8.248140215873718e-01,  0.000000000000000e+00, -1.236340999603271e+00, -1.222023487091064e+00,  7.137306928634644e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -1.793740689754486e-01, -2.359046339988708e-01, -9.550783038139343e-01,  0.000000000000000e+00,  4.669935628771782e-02,  9.676878452301025e-01, -2.477894872426987e-01,  0.000000000000000e+00,  9.826717972755432e-01, -8.904819190502167e-02, -1.625614315271378e-01,  0.000000000000000e+00, -3.128553330898285e-01, -1.506898760795593e+00, -5.608037579804659e-03,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -1.098264803545135e-07,  1.000000000000000e+00, -6.366608431562781e-07,  0.000000000000000e+00,  7.122209668159485e-01,  6.441172786253446e-07,  7.019557356834412e-01,  0.000000000000000e+00,  7.019556164741516e-01, -3.320589598843071e-07, -7.122210264205933e-01,  0.000000000000000e+00, -9.041656851768494e-01, -4.079296047621028e-07,  6.456112861633301e-02,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -3.081383113112679e-07,  9.999997615814209e-01, -7.081434887368232e-07,  0.000000000000000e+00,  7.653858661651611e-01,  8.364056043319579e-07,  6.435720920562744e-01,  0.000000000000000e+00,  6.435721516609192e-01, -3.033107986993855e-07, -7.653859853744507e-01,  0.000000000000000e+00, -8.665648102760315e-01, -4.657642875827150e-07,  3.664729595184326e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -4.752108111460984e-07,  9.999998807907104e-01, -7.858970434426737e-07,  0.000000000000000e+00,  7.830492258071899e-01,  1.008453637041384e-06,  6.219602227210999e-01,  0.000000000000000e+00,  6.219604015350342e-01, -2.781952161967638e-07, -7.830490469932556e-01,  0.000000000000000e+00, -8.481513261795044e-01, -4.687419448146102e-07,  5.938368439674377e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -6.727619279445207e-07,  9.999999403953552e-01, -8.432135132352414e-07,  0.000000000000000e+00,  8.191516399383545e-01,  1.182285927825433e-06,  5.735775828361511e-01,  0.000000000000000e+00,  5.735776424407959e-01, -2.631998654578638e-07, -8.191516995429993e-01,  0.000000000000000e+00, -8.018580079078674e-01, -4.559196895570494e-07,  8.389254808425903e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -5.853390803167713e-07,  9.999998807907104e-01, -9.306363608629908e-07,  0.000000000000000e+00,  8.191515803337097e-01,  1.160817078016407e-06,  5.735776424407959e-01,  0.000000000000000e+00,  5.735777020454407e-01, -3.849561096558318e-07, -8.191516399383545e-01,  0.000000000000000e+00, -8.005026578903198e-01, -2.421720921574888e-07,  1.021049737930298e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.370906375086633e-06, -9.063078165054321e-01, -4.226179420948029e-01,  0.000000000000000e+00,  8.483813405036926e-01, -2.237268090248108e-01,  4.797869026660919e-01,  0.000000000000000e+00, -5.293859243392944e-01, -3.585414886474609e-01,  7.688941359519958e-01,  0.000000000000000e+00, -2.452614784240723e+00,  2.558197677135468e-01, -3.841702640056610e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  7.801948189735413e-01,  5.544434115290642e-02,  6.230748295783997e-01,  0.000000000000000e+00, -5.723066926002502e-01, -3.388131856918335e-01,  7.467737197875977e-01,  0.000000000000000e+00,  2.525103688240051e-01, -9.392187595367432e-01, -2.326091080904007e-01,  0.000000000000000e+00,  6.503484845161438e-01, -2.163991630077362e-01, -8.641875982284546e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  3.640502318739891e-02,  9.993365406990051e-01, -1.293888664804399e-03,  0.000000000000000e+00, -9.734669327735901e-01,  3.575525060296059e-02,  2.260171920061111e-01,  0.000000000000000e+00,  2.259134352207184e-01, -6.968602538108826e-03,  9.741226434707642e-01,  0.000000000000000e+00,  8.681621551513672e-01, -2.904272079467773e-01,  3.084107935428619e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  3.258804231882095e-02,  9.993364810943604e-01,  1.627941802144051e-02,  0.000000000000000e+00, -9.629731774330139e-01,  3.575525432825089e-02, -2.672157883644104e-01,  0.000000000000000e+00, -2.676205635070801e-01, -6.968603469431400e-03,  9.634992480278015e-01,  0.000000000000000e+00,  2.864980697631836e-01, -2.904272675514221e-01,  5.072794556617737e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.188528072088957e-02,  9.992881417274475e-01,  3.581084311008453e-02,  0.000000000000000e+00, -5.213100314140320e-01,  3.675352409482002e-02, -8.525754213333130e-01,  0.000000000000000e+00, -8.532847166061401e-01, -8.535454049706459e-03,  5.213755965232849e-01,  0.000000000000000e+00, -3.528854548931122e-01, -2.913231849670410e-01,  3.638275265693665e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  4.378866553306580e-01,  8.717914223670959e-01,  2.196255475282669e-01,  0.000000000000000e+00, -8.005398511886597e-02,  2.811313271522522e-01, -9.563245773315430e-01,  0.000000000000000e+00, -8.954589366912842e-01,  4.011798202991486e-01,  1.928941011428833e-01,  0.000000000000000e+00, -7.424584627151489e-01, -6.337559223175049e-02,  7.929795235395432e-02,  9.999999403953552e-01 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -4.010853767395020e-01,  1.869403868913651e-01,  8.967632651329041e-01,  0.000000000000000e+00, -3.296797350049019e-02,  9.753754734992981e-01, -2.180732339620590e-01,  0.000000000000000e+00, -9.154472947120667e-01, -1.170304790139198e-01, -3.850456774234772e-01,  0.000000000000000e+00, -5.163757205009460e-01, -1.612296104431152e-01, -4.393170475959778e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  6.070722639560699e-02,  9.974885582923889e-01,  3.648964688181877e-02,  0.000000000000000e+00, -5.636619776487350e-02,  3.992458060383797e-02, -9.976117014884949e-01,  0.000000000000000e+00, -9.965629577636719e-01,  5.850544571876526e-02,  5.864838138222694e-02,  0.000000000000000e+00, -6.776808500289917e-01, -2.426968514919281e-01,  6.510636955499649e-02,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.823524832725525e-01, -9.827298521995544e-01,  3.147070482373238e-02,  0.000000000000000e+00, -9.567187428474426e-01, -1.699612140655518e-01,  2.362253218889236e-01,  0.000000000000000e+00, -2.267967611551285e-01, -7.318490743637085e-02, -9.711886644363403e-01,  0.000000000000000e+00,  9.859548807144165e-01,  3.448848426342010e-01,  6.612824648618698e-02,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -7.013928890228271e-02, -9.827296137809753e-01,  1.712405085563660e-01,  0.000000000000000e+00, -2.386313304305077e-02, -1.699611693620682e-01, -9.851618409156799e-01,  0.000000000000000e+00,  9.972516894340515e-01, -7.318486273288727e-02, -1.153005287051201e-02,  0.000000000000000e+00, -1.655900329351425e-01,  3.448847830295563e-01,  4.420787394046783e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.709751933813095e-01, -9.827296137809753e-01,  7.078354805707932e-02,  0.000000000000000e+00, -9.852445721626282e-01, -1.699611693620682e-01,  2.015363983809948e-02,  0.000000000000000e+00, -7.775121368467808e-03, -7.318488508462906e-02, -9.972882270812988e-01,  0.000000000000000e+00,  4.400688111782074e-01,  3.448847830295563e-01,  5.346560478210449e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -4.169782996177673e-02, -9.954148530960083e-01,  8.608361333608627e-02,  0.000000000000000e+00, -8.052924871444702e-01, -1.751615107059479e-02, -5.926191210746765e-01,  0.000000000000000e+00,  5.914098620414734e-01, -9.403339028358459e-02, -8.008697628974915e-01,  0.000000000000000e+00, -1.471569836139679e-01,  3.273454308509827e-01,  5.518355369567871e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  9.430365264415741e-02, -9.954150319099426e-01, -1.599754393100739e-02,  0.000000000000000e+00, -1.529733929783106e-02, -1.751612126827240e-02,  9.997296929359436e-01,  0.000000000000000e+00, -9.954261779785156e-01, -9.403344243764877e-02, -1.687905006110668e-02,  0.000000000000000e+00,  4.148870110511780e-01,  3.273454904556274e-01, -3.277944633737206e-03,  1.000000119209290e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  9.079988598823547e-01,  4.178075194358826e-01, -3.123787790536880e-02,  0.000000000000000e+00, -4.047112464904785e-01,  8.553586006164551e-01, -3.233732879161835e-01,  0.000000000000000e+00, -1.083882823586464e-01,  3.062647283077240e-01,  9.457556009292603e-01, -0.000000000000000e+00,  1.582168489694595e-01, -9.448190331459045e-01,  6.380386352539062e-01,  1.000000119209290e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  9.774733781814575e-01,  2.091525644063950e-01,  2.831003814935684e-02,  0.000000000000000e+00, -2.074893414974213e-01,  9.768210053443909e-01, -5.261921882629395e-02,  0.000000000000000e+00, -3.865933790802956e-02,  4.555983468890190e-02,  9.982131719589233e-01,  0.000000000000000e+00, -1.977410912513733e-01, -1.725205898284912e+00,  1.626218259334564e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  9.774732589721680e-01,  1.982110589742661e-01,  7.251645624637604e-02,  0.000000000000000e+00, -2.074893116950989e-01,  9.653697013854980e-01,  1.581440865993500e-01,  0.000000000000000e+00, -3.865933790802956e-02, -1.696279942989349e-01,  9.847494959831238e-01,  0.000000000000000e+00, -1.982548385858536e-01, -2.381517410278320e+00, -3.565383851528168e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  9.774732589721680e-01,  1.982110589742661e-01,  7.251645624637604e-02,  0.000000000000000e+00, -2.074893116950989e-01,  9.653697013854980e-01,  1.581440865993500e-01,  0.000000000000000e+00, -3.865933790802956e-02, -1.696279942989349e-01,  9.847494959831238e-01,  0.000000000000000e+00, -1.981459707021713e-01, -2.764496088027954e+00, -3.574051856994629e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  5.621184706687927e-01, -3.035990893840790e-01,  7.693183422088623e-01,  0.000000000000000e+00,  2.935459315776825e-01, -7.963886260986328e-01, -5.287678241729736e-01,  0.000000000000000e+00,  7.732101082801819e-01,  5.230601429939270e-01, -3.585445582866669e-01,  0.000000000000000e+00, -1.167939186096191e+00,  2.427531480789185e+00,  7.979893684387207e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  5.528883337974548e-01, -1.584291458129883e-01,  8.180555105209351e-01,  0.000000000000000e+00,  2.339677065610886e-01, -9.127448201179504e-01, -3.348962962627411e-01,  0.000000000000000e+00,  7.997334003448486e-01,  3.765586316585541e-01, -4.675786495208740e-01,  0.000000000000000e+00, -1.039052128791809e+00,  1.964689731597900e+00,  3.798113763332367e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  5.260265469551086e-01, -7.239308208227158e-02,  8.473813533782959e-01,  0.000000000000000e+00,  2.105512470006943e-01, -9.542677402496338e-01, -2.122282385826111e-01,  0.000000000000000e+00,  8.239925503730774e-01,  2.900548577308655e-01, -4.867276847362518e-01,  0.000000000000000e+00, -1.003522872924805e+00,  1.356586694717407e+00,  1.865496039390564e-01,  9.999998807907104e-01 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  8.676073551177979e-01,  2.210390120744705e-01,  4.454206526279449e-01,  0.000000000000000e+00,  4.734091758728027e-01, -6.412196755409241e-01, -6.039209961891174e-01,  0.000000000000000e+00,  1.521223932504654e-01,  7.348319888114929e-01, -6.609690189361572e-01,  0.000000000000000e+00, -1.986522793769836e+00,  1.554528236389160e+00,  1.259803175926208e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  8.676072955131531e-01,  3.550531864166260e-01,  3.481307923793793e-01,  0.000000000000000e+00,  4.734091758728027e-01, -8.039815425872803e-01, -3.598569035530090e-01,  0.000000000000000e+00,  1.521223485469818e-01,  4.770224392414093e-01, -8.656256794929504e-01,  0.000000000000000e+00, -1.984717011451721e+00,  1.248732447624207e+00,  8.996210098266602e-01,  9.999998807907104e-01 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  9.263818264007568e-01,  1.867548823356628e-01,  3.270159065723419e-01,  0.000000000000000e+00,  2.735083401203156e-01, -9.305728673934937e-01, -2.433655858039856e-01,  0.000000000000000e+00,  2.588623464107513e-01,  3.148907124996185e-01, -9.131450057029724e-01,  0.000000000000000e+00, -1.797981023788452e+00,  1.123543143272400e+00,  7.627890110015869e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -3.634244799613953e-01,  6.817948222160339e-01, -6.348847746849060e-01,  0.000000000000000e+00, -8.824602365493774e-01, -4.703872203826904e-01,  1.490116119384766e-07,  0.000000000000000e+00, -2.986416220664978e-01,  5.602602362632751e-01,  7.726069092750549e-01,  0.000000000000000e+00,  2.785571813583374e+00,  8.110444545745850e-01,  5.486155748367310e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -6.702060699462891e-01,  5.709958076477051e-01, -4.741177558898926e-01,  0.000000000000000e+00, -6.267734169960022e-01, -7.775663733482361e-01, -5.045093968510628e-02,  0.000000000000000e+00, -3.974652886390686e-01,  2.633517086505890e-01,  8.790146708488464e-01,  0.000000000000000e+00,  2.819637060165405e+00,  5.511215925216675e-01,  3.084980249404907e-01,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([ -6.702060699462891e-01,  5.709959268569946e-01, -4.741178154945374e-01,  0.000000000000000e+00, -6.267735362052917e-01, -7.775665521621704e-01, -5.045094341039658e-02,  0.000000000000000e+00, -3.974652588367462e-01,  2.633517682552338e-01,  8.790147900581360e-01,  0.000000000000000e+00,  2.819123506546021e+00, -6.969913244247437e-01,  3.084980845451355e-01,  1.000000119209290e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  7.236775159835815e-01, -6.516943573951721e-01, -2.271251231431961e-01,  0.000000000000000e+00, -1.418589204549789e-01, -4.625398516654968e-01,  8.751761317253113e-01,  0.000000000000000e+00, -6.754013895988464e-01, -6.011255383491516e-01, -4.271781444549561e-01,  0.000000000000000e+00, -2.135854512453079e-01,  1.705897331237793e+00, -2.324225902557373e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  9.135665893554688e-01,  4.065578877925873e-01, -1.032242830842733e-02,  0.000000000000000e+00,  3.907741308212280e-01, -8.845649361610413e-01, -2.546375989913940e-01,  0.000000000000000e+00, -1.126557141542435e-01,  2.285946756601334e-01, -9.669814109802246e-01,  0.000000000000000e+00, -2.081149101257324e+00,  3.783754706382751e-01,  1.388979434967041e+00,  1.000000000000000e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  8.789522647857666e-01, -1.534347981214523e-02,  4.766632914543152e-01,  0.000000000000000e+00,  1.484872102737427e-01, -9.409982562065125e-01, -3.040961027145386e-01,  0.000000000000000e+00,  4.532048404216766e-01,  3.380642831325531e-01, -8.248140215873718e-01,  0.000000000000000e+00, -1.256040930747986e+00,  1.222367644309998e+00,  7.030472755432129e-01,  1.000000119209290e+00 ]).reshape(4, 4)), 
    np.asmatrix(np.array([  1.793740540742874e-01, -2.359046489000320e-01,  9.550783038139343e-01,  0.000000000000000e+00,  4.669917374849319e-02, -9.676879048347473e-01, -2.477898150682449e-01,  0.000000000000000e+00,  9.826719760894775e-01,  8.904840052127838e-02, -1.625614911317825e-01,  0.000000000000000e+00, -3.168755173683167e-01,  1.512186408042908e+00, -2.701400965452194e-02,  1.000000119209290e+00 ]).reshape(4, 4))
]

from numpy.linalg import inv

def max_abs(a1, a2, a3):
    if abs(a1) > abs(a2) and abs(a1) > abs(a3):
        return a1
    else:
        if abs(a2) > abs(a3):
            return a2
        else:
            return a3

def get_quat(Rx):
    x = np.sqrt(np.abs(1 + Rx[0, 0] - Rx[1, 1] - Rx[2, 2])) / 2
    y = np.sqrt(np.abs(1 + Rx[1, 1] - Rx[0, 0] - Rx[2, 2])) / 2
    z = np.sqrt(np.abs(1 + Rx[2, 2] - Rx[1, 1] - Rx[0, 0])) / 2
    xy =  (Rx[1, 0] + Rx[0, 1]) / 4
    xz =  (Rx[2, 0] + Rx[0, 2]) / 4
    yz =  (Rx[1, 2] + Rx[2, 1]) / 4
    ax = -(Rx[2, 1] - Rx[1, 2]) / 4
    ay =  (Rx[2, 0] - Rx[0, 2]) / 4
    az = -(Rx[1, 0] - Rx[0, 1]) / 4
    x = -x if (xy < 0) and (xz < 0) else x
    y = -y if (xy < 0) and (yz < 0) else y
    z = -z if (xz < 0) and (yz < 0) else z 
    a = 1.0
    if x * x + y * y + z * z > 0.00001:
        a = max_abs(ax, ay, az)/max_abs(x, y, z)
    else:
        x = 0
        y = 0
        z = 0
    #print("x = %f y = %f z = %f a = %f ax = %f ay = %f az %f" % (x, y, z, a, ax, ay, az))
    length = np.sqrt(x**2 + y**2 + z**2 + a**2)
    if (length < 0.5):
        print("x = %f y = %f z = %f a = %f ax = %f ay = %f az %f" % (x, y, z, a, ax, ay, az))
    return np.array([x/length, y/length, z/length, -a/length])

def get_mat4(q):
    return np.asmatrix(
        np.array([
            [1 - 2 * q[1] ** 2 - 2 * q[2] ** 2, 2 * q[0] * q[1] - 2 * q[3] * q[2], 2 * q[0] * q[2] + 2 * q[3] * q[1], 0],
            [2 * q[0] * q[1] + 2 * q[3] * q[2], 1 - 2 * q[0] ** 2 - 2 * q[2] ** 2, 2 * q[1] * q[2] - 2 * q[3] * q[0], 0],
            [2 * q[0] * q[2] - 2 * q[3] * q[1], 2 * q[1] * q[2] + 2 * q[3] * q[0], 1 - 2 * q[0] ** 2 - 2 * q[1] ** 2, 0],
            [0, 0, 0, 1]
        ])
    )

for x in range(1, len(parents)):
    IBMx = matrices[x]
    IBMp = matrices[parents[x]]
    BMx = inv(IBMx)
    BMp = inv(IBMp)
    Lx = BMx * IBMp
    #print("L matrix = \n", Lx)
    TLx = np.asmatrix(np.identity(4))
    TLx[3] = Lx[3]
    #print("TL matrix = \n", TLx)
    Rx = Lx * inv(TLx)
    #print("Rx matrix = \n", Rx)
    quat = get_quat(Rx)
    #print("Length[%d] quat = " % x, quat[0]**2 + quat[1]**2 + quat[2]**2 + quat[3]**2)
    #print("Quaternion = ", quat)
    Rx2 = get_mat4(quat)
    #print("Check R matrix = \n", Rx2)
    print("Max in matrix[%d]: " % x, (Rx2 - Rx).max())

#Tx = np.asmatrix(np.identity(4))
#Tp = np.asmatrix(np.identity(4))
#Tx[3] = BMx[3]
#Tp[3] = BMp[3]
#print("IBMx = \n", IBMx)
#print("IBMp = \n", IBMp)
#print("BMx = \n", BMx)
#print("BMp = \n", BMp)
#print("Tx = \n", Tx)
#print("Tp = \n", Tp)
#print("Tx * BMx = \n", BMx * inv(Tx))
#print("Tp * BMp = \n", BMp * inv(Tp))



